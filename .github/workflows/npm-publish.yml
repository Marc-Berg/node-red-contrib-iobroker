name: Publish NPM Package and Create GitHub Release
on:
  push:
    branches:
      - main
jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.version_changed }}
      new_version: ${{ steps.version_check.outputs.new_version }}
      is_prerelease: ${{ steps.version_check.outputs.is_prerelease }}
      commit_message: ${{ steps.get_commit.outputs.commit_message }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Get commit message
        id: get_commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s%n%n%b")
          {
            echo "commit_message<<EOF"
            echo "$COMMIT_MESSAGE"
            echo "EOF"
          } >> $GITHUB_OUTPUT
      - name: Check if version changed
        id: version_check
        run: |
          OLD_VERSION=$(git show HEAD~1:package.json | jq -r '.version')
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "Old version: $OLD_VERSION"
          echo "New version: $NEW_VERSION"
          
          # Semver-based Pre-Release Detection
          IS_PRERELEASE=$(node -e "
            const semver = require('semver');
            const version = '$NEW_VERSION';
            const prerelease = semver.prerelease(version);
            console.log(prerelease ? 'true' : 'false');
            if (prerelease) {
              console.error('✅ Pre-release detected - parts:', prerelease);
            } else {
              console.error('❌ Stable version - no pre-release parts');
            }
          ")
          
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Semver detection result: $IS_PRERELEASE for version $NEW_VERSION"
          
          if [ "$OLD_VERSION" = "$NEW_VERSION" ]; then
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          else
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Version changed from $OLD_VERSION to $NEW_VERSION"
          fi
          
          # Summary
          echo "=== SUMMARY ==="
          echo "Version changed: $([ "$OLD_VERSION" = "$NEW_VERSION" ] && echo "false" || echo "true")"
          echo "Is pre-release: $IS_PRERELEASE"
          echo "Will publish to NPM: $([ "$IS_PRERELEASE" = "false" ] && [ "$OLD_VERSION" != "$NEW_VERSION" ] && echo "YES" || echo "NO")"
  publish-npm:
    needs: check-version
    if: ${{ needs.check-version.outputs.version_changed == 'true' && needs.check-version.outputs.is_prerelease == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Publish to NPM
        run: |
          echo "🚀 Publishing stable version ${{ needs.check-version.outputs.new_version }} to NPM"
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  create-github-release:
    needs: [check-version]
    if: ${{ needs.check-version.outputs.version_changed == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Create .tgz package
        run: npm pack
      - name: Create GitHub Release
        run: |
          if [ "${{ needs.check-version.outputs.is_prerelease }}" = "true" ]; then
            echo "📦 Creating pre-release for v${{ needs.check-version.outputs.new_version }}"
            gh release create "v${{ needs.check-version.outputs.new_version }}" \
              --title "v${{ needs.check-version.outputs.new_version }} (Pre-release)" \
              --notes "${{ needs.check-version.outputs.commit_message }}" \
              --prerelease
          else
            echo "🎉 Creating stable release for v${{ needs.check-version.outputs.new_version }}"
            gh release create "v${{ needs.check-version.outputs.new_version }}" \
              --title "v${{ needs.check-version.outputs.new_version }}" \
              --notes "${{ needs.check-version.outputs.commit_message }}" \
              --latest
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload .tgz to GitHub Release
        run: |
          TGZ_FILE=$(ls *.tgz | head -n 1)
          echo "📎 Uploading $TGZ_FILE to GitHub Release"
          gh release upload "v${{ needs.check-version.outputs.new_version }}" "$TGZ_FILE" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
